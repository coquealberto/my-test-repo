from transformers import AutoTokenizer, AutoModelForSequenceClassification, Trainer, TrainingArguments, EarlyStoppingCallback
from transformers import create_optimizer
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
#from tensorflow.keras.utils import to_categorical
#import tensorflow as tf
import pandas as pd
import numpy as np
from pathlib import Path
from training import load_texts, load_data # Asumiendo que la definiste en training.py
from datasets import Dataset
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import classification_report, precision_recall_fscore_support, accuracy_score
import torch
from torch.nn import CrossEntropyLoss
from sklearn.utils.class_weight import compute_class_weight

LABELED_DATA_PATH = Path('data/labeled/labeled_documents_36_750.csv')
# Parámetros del Modelo y División
TEST_SIZE = 0.15  # 15% para el conjunto de prueba final
VALIDATION_SIZE = 0.15 # 15% del total original para validación (aprox 0.1765 de lo que queda después del test split)
RANDOM_STATE = 42 # Para reproducibilidad
MAX_LENGTH=2048 #512

# --- Tokenizador y Dataset ---
#MODEL_NAME = "bert-base-multilingual-cased"
#MODEL_NAME = "PlanTL-GOB-ES/roberta-base-bne"
MODEL_NAME = "Narrativa/legal-longformer-base-4096-spanish"
MODEL_NAME = "mrm8488/longformer-base-4096-spanish"
#MODEL_NAME = "allenai/longformer-base-4096"

# --- Cargar datos ---
df = load_data(LABELED_DATA_PATH)
if df is None:
    raise SystemExit("No se pudieron cargar los datos")

# Codificar etiquetas
le = LabelEncoder()
df['label_id'] = le.fit_transform(df['label'])
label_mapping = dict(enumerate(le.classes_))

# Dividir conjunto
from sklearn.model_selection import train_test_split

X_paths = df['markdown_path']
y = df['label_id']

X_train_paths, X_test_paths, y_train_val, y_test = train_test_split(
    X_paths, y, test_size=TEST_SIZE, random_state=RANDOM_STATE, stratify=y
)
val_size_relative = VALIDATION_SIZE / (1.0 - TEST_SIZE)
X_train_paths, X_val_paths, y_train, y_val = train_test_split(
    X_train_paths, y_train_val, test_size=val_size_relative,
    random_state=RANDOM_STATE, stratify=y_train_val
)

X_train_texts = load_texts(X_train_paths)
X_val_texts = load_texts(X_val_paths)
X_test_texts = load_texts(X_test_paths)

tokenizer = AutoTokenizer.from_pretrained(MODEL_NAME, use_fast=True)

def smart_truncate_2(text, max_len=MAX_LENGTH):
    tokens = tokenizer.tokenize(text)
    if len(tokens) <= max_len:
        return text
    head = tokens[:max_len // 2]
    tail = tokens[-(max_len // 2):]
    truncated_tokens = head + tail
    return tokenizer.convert_tokens_to_string(truncated_tokens)

def smart_truncate(text, tokenizer, max_len=MAX_LENGTH, return_ids=False):
    encoding = tokenizer.encode_plus(
        text,
        add_special_tokens=False,
        return_attention_mask=False,
        return_token_type_ids=False
        # ⚠️ NO usar add_prefix_space aquí
    )

    input_ids = encoding["input_ids"]

    head = input_ids[:max_len // 2]
    tail = input_ids[-(max_len // 2):]
    truncated_ids = head + tail
    truncated_ids = input_ids
    if return_ids:
        return truncated_ids
    else:
        return tokenizer.decode(truncated_ids, skip_special_tokens=True)

'''
# Aplicarlo antes de tokenizar
X_train_texts = [smart_truncate_2(t) for t in X_train_texts]
X_val_texts = [smart_truncate_2(t) for t in X_val_texts]
X_test_texts = [smart_truncate_2(t) for t in X_test_texts]

'''
# Aplicarlo antes de tokenizar
X_train_texts = [smart_truncate(t, tokenizer) for t in X_train_texts]
X_val_texts = [smart_truncate(t, tokenizer) for t in X_val_texts]
X_test_texts = [smart_truncate(t, tokenizer) for t in X_test_texts]


train_dataset = Dataset.from_dict({"text": X_train_texts, "label": y_train})
val_dataset = Dataset.from_dict({"text": X_val_texts, "label": y_val})
test_dataset = Dataset.from_dict({"text": X_test_texts, "label": y_test})

# --- Tokenizar datasets ---
def tokenize_batch(example):
    return tokenizer(example["text"], padding="max_length", truncation=True, max_length=MAX_LENGTH)

train_dataset = train_dataset.map(tokenize_batch, batched=True)
val_dataset = val_dataset.map(tokenize_batch, batched=True)
test_dataset = test_dataset.map(tokenize_batch, batched=True)

# --- Convertir a tensores ---
columns = ['input_ids', 'attention_mask', 'label']
train_dataset.set_format(type='torch', columns=columns)
val_dataset.set_format(type='torch', columns=columns)
test_dataset.set_format(type='torch', columns=columns)

# --- Modelo ---
num_labels = len(le.classes_)
model = AutoModelForSequenceClassification.from_pretrained(MODEL_NAME, num_labels=num_labels)

# --- Entrenamiento ---
training_args = TrainingArguments(
    output_dir="./models/bert_model//bert_classifier",
    eval_strategy="epoch",
    save_strategy="epoch",
    per_device_train_batch_size=16,
    per_device_eval_batch_size=16,
    gradient_accumulation_steps=2,
    num_train_epochs=10,
    learning_rate=3e-5,
    weight_decay=0.01,
    warmup_ratio=0.1,  # Warmup para estabilizar
    logging_dir='./logs',
    logging_steps=10,
    load_best_model_at_end=True,
    metric_for_best_model="eval_loss",
    fp16=True,
)

def compute_metrics(eval_pred):
    logits, labels = eval_pred
    preds = np.argmax(logits, axis=-1)
    precision, recall, f1, _ = precision_recall_fscore_support(labels, preds, average='weighted')
    acc = accuracy_score(labels, preds)
    return {"accuracy": acc, "precision": precision, "recall": recall, "f1": f1}

trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=train_dataset,
    eval_dataset=val_dataset,
    compute_metrics=compute_metrics,
    callbacks=[EarlyStoppingCallback(early_stopping_patience=2)],
)

class_weights = compute_class_weight(class_weight='balanced', classes=np.unique(y_train), y=y_train)
class_weights = torch.tensor(class_weights, dtype=torch.float).to(model.device)

def custom_compute_loss(model, inputs, return_outputs=False, **kwargs):
    labels = inputs.pop("labels")
    outputs = model(**inputs)
    logits = outputs.logits
    loss_fct = CrossEntropyLoss()
    loss = loss_fct(logits, labels)
    return (loss, outputs) if return_outputs else loss

trainer.compute_loss = custom_compute_loss

trainer.train()

# --- Evaluación ---
preds = trainer.predict(test_dataset)
y_pred = preds.predictions.argmax(axis=-1)
print(classification_report(y_test, y_pred, target_names=le.classes_))
