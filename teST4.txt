Varios asuntos, como cambiarias el archivo __init__.py de data acquisition. Otro aspecto, me gustaría que el json final tuviera la identificación para el grupo de ítems del conversation_id y el communicaction_id de la transcripción. 
Por otro lado, quiero añadir el siguiente aspecto y es que la transcripción descargada de genesys se usará en todos los casos y esta tiene el siguiente formato.
este es un ejemplo de transcripción


Próximos asuntos a tratar. Tras obtener la lista de transcripciones potenciales sobre las que se realizará le evaluación de las LLM se hará lo siguiente, y es agrupar la info valiosa del json de la transcripción, en el otro proyecto contaba con la siguiente función para recoger dicha info:

def leer_transcripcion(archivo_json):
    """
    Procesa y extrae los datos relevantes de un archivo JSON de transcripción, incluyendo detalles específicos 
    del wrap up de llamadas realizado por agentes, y devuelve información estructurada para su uso posterior.

    Args:
        archivo_json (str): Ruta al archivo JSON que contiene los datos de la transcripción.

    Returns:
        dict or None: Un diccionario conteniendo información estructurada extraída de la transcripción, como
        códigos de conclusión, descripción, aplicación, dirección de la llamada, y frases relevantes.
        Retorna None si no se encuentra el código 'wrapUpCode' para un agente o si hay errores al cargar los datos.
    """
    datos = load_json(archivo_json)

    tipo = next((participante.get("wrapUpCode") for participante in datos.get("participants", []) if participante.get("participantPurpose") == "agent"), None)

    if tipo is None:
        logging.warning(f"No se encontró 'wrapUpCode' para un 'agent' en el archivo {archivo_json}")
        log_interaction('wrap_up_code search', 'failure', f'wrap up code not found for file; {os.path.splitext(archivo_json)[0]}')
        return None

    json_file_path_wrapup = os.path.join(os.path.dirname(__file__),'..', 'data','wrapup_codes.json')
    wrapup_codes = load_json(json_file_path_wrapup)

    wrapup_info = wrapup_codes.get(tipo, {})

    # Constitución lista de frases con identificación del interlocutor
    frases = []
    hablante_anterior = None

    for transcript in datos.get("transcripts", []):
        for phrase in transcript.get("phrases", []):
            texto = phrase.get("text", "").strip()
            purpose =  phrase.get("participantPurpose", "")

            if purpose == "internal":
                hablante = "Agente"
            elif purpose == "external":
                hablante = "Interlocutor"
            else:
                hablante = "Desconocido"

            if not texto:
                continue

            if frases and hablante == hablante_anterior:
                # Añadimos al último bloque existente
                frases[-1] += f" {texto}"
            else:
                # Nuevo hablante, nueva línea
                frases.append(f"{hablante}: {texto}")
                hablante_anterior = hablante

    return {
        "codigo_wrapup": wrapup_info.get('Codigos de Conclusion', 'Codigos de Conclusion no disponible'),
        "descripcion": wrapup_info.get('Descripcion', 'Descripcion no disponible'),
        "aplicacion": wrapup_info.get('Aplicacion', 'Aplicacion no disponible'),
        "llamada_dir": "saliente" if datos.get("participants", [{}])[0].get("initialDirection") == "outbound" else "entrante",
        "indicaciones_ad": wrapup_info.get('Indicaciones Adicionales', 'Indicaciones Adicionales no disponibles'),
        "frases": frases
    }


como puede obervarse a partir de esta info se tiene la dirección de la la llamada y info adicional según el wrap-up code, esta info estaba almacenada en un json llamado wrapup_codes.json y ahora me gustaria que me ayudaras a ver donde situar esta info, esta info de momento creo que no se usará pero podría añadirse posteriormente como metadata a los LLM:

{
    "62c6d1ab-8b6e-448d-b71b-6febf9a76aea": {
        "Codigos de Conclusion": "PA (Payment Agreement)",
        "Descripcion": "Varias opciones: Formalizado acuerdo de pago , Fijada nueva fecha de pago , Pago ya realizado",        
        "Aplicacion": "Identificar escenarios como PA (Payment Agreement) nuevo tras cambio de condiciones, PA roto o anulado, PA vigente, PA vigente con nueva fecha de vencimiento",
        "Indicaciones Adicionales": "Identificar el acuerdo final de pago. El número total de expedientes. El número de expedientes sobre los que se ha alcanzado el acuerdo de pago y la cuantía."
    },
    "63d7f77e-6d33-41e6-9b4c-9b5c786bb326": {
        "Codigos de Conclusion": "CD sin PTP (Promess To Pay)",
        "Descripcion": "Contacto directo sin acuerdo de pago",
        "Aplicacion": "Identificar uno de los escenarios siguientes u otro no mencionado: - Con predisposicion a cerrar acuerdo de pago/negociar. - Negativas claras al pago. - Falta de pago por otros motivos. - No paga debido a Mala Situación Personal.",
        "Indicaciones Adicionales": "Identificar motivos por los que no se cierra el acuerdo de pago y posibles detalles sobre situacion economica del cliente"
    },
    "68fd4fee-008b-433d-b049-c5ab2b8c97f2": {
        "Codigos de Conclusion": "CI",
        "Descripcion": "Contacto indirecto",
        "Aplicacion": "tercero que anota recado o facilita informacion, o conoce a interviniente, pero no da recado si no informamos.",
        "Indicaciones Adicionales": "Identificar si el recado se deja satisfactoriamente y si hay reprogramación."
    },

…

 asi con unos 30 wrap-ups codes.

}


como puedes observar también del json se obtiene la transcripción intercalando las frases como en el json ejemplo e identificando el interlocutor con la info del json de la transcripción. Este campo es el que debería sustituirse por el que se obtendría de whisper en el caso en que se active este camino, por lo que la info del archivo json de la transcripción se usará en ambos casos solo intercambiándose el apartado de frases del diccionario resumen en función del método elegido. 

en el caso de que se active whisper, habrá que buscar el archivo de audio para cada json con conversation id y communication id determinados, el nombre del archivo de audio deberá tener la misma denominación pero con distinta extensión y se hallará en su carpeta determinada. como ya se dijo antes esta descarga se realizara a partir de un nuevo endpoint de geneys que aun no tenemos y que se atacará para buscar con los identificadores de la transcripción para obtener el audio en cuestión. en el apartado de whisper si este es true, solo se susituirán las frases de la transcripción original, si se encuentra el archivo de audio correspondiente al json y se consigue satisfactoriamente la transcripción mediante whisper. 

la conformación del json con la info estructurada como el que se obtiene de la función leer_transcripción, quizá sea mejor incluirlo en load_call_data_for_evaluation, no?

por otro lado, la creación de datos sintéticos (dummy) de los campos que se obtendrán en el futuro de kollecto para cada llamada, de momento se mantendrá en esta versión. 
