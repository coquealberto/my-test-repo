Varios asuntos, como cambiarias el archivo __init__.py de data acquisition. Otro aspecto,  me gustaria poder elegir el intervalo de horas para la descarga. Otro aspecto, me gustaría que el json final tuviera la identificación para el grupo de ítems del conversation_id y el communicaction_id de la transcripción. Por otro lado, quiero añadir el siguiente aspecto y es que la transcripciones se filtraran en un paso adicional tras ser descargadas y antes de descargar su posible versión de audio de la conversación. y esto se hará mediante un campo llamado wrap-up code presente en los datos de la transcripción. he aquí un ejemplo de una transcripción anonimizada. 

{
  "organizationId": "anon-organization-id",
  "conversationId": "anon-conversation-id",
  "communicationId": "anon-communication-id",
  "recordingId": "anon-recording-id",
  "transcripts": [
    {
      "transcriptId": "anon-transcript-id-1",
      "language": "es-ES",
      "programId": "anon-program-id",
      "features": [],
      "startTime": 1742977522441,
      "phrases": [],
      "analytics": {
        "acoustics": [
          {
            "eventType": "acd",
            "offsetMs": 7991,
            "startTimeMs": 1742977525354,
            "durationMs": 563,
            "participant": "internal"
          }
        ]
      }
    },
    {
      "transcriptId": "anon-transcript-id-2",
      "language": "es-ES",
      "programId": "anon-program-id",
      "engineId": "anon-engine-id",
      "engineProvider": "anon-provider",
      "features": [
        "VOICE_TRANSCRIPTION"
      ],
      "startTime": 1742977525766,
      "duration": {
        "milliseconds": 34425
      },
      "phrases": [
        {
          "text": "no está disponible",
          "stability": 1.0,
          "confidence": 0.9107,
          "startTimeMs": 1742977527148,
          "duration": {
            "milliseconds": 911
          },
          "words": [
            {
              "word": "no",
              "confidence": 0.918,
              "startTimeMs": 1742977527148,
              "duration": {
                "milliseconds": 40
              }
            },
            {
              "word": "está",
              "confidence": 0.849,
              "startTimeMs": 1742977527386,
              "duration": {
                "milliseconds": 40
              }
            },
            {
              "word": "disponible",
              "confidence": 0.965,
              "startTimeMs": 1742977527584,
              "duration": {
                "milliseconds": 475
              }
            }
          ],
          "alternatives": [],
          "participantPurpose": "external",
          "phraseIndex": 0
        },
        {
          "text": "hola",
          "stability": 1.0,
          "confidence": 1.0,
          "startTimeMs": 1742977528520,
          "duration": {
            "milliseconds": 39
          },
          "words": [
            {
              "word": "hola",
              "confidence": 1.0,
              "startTimeMs": 1742977528520,
              "duration": {
                "milliseconds": 39
              }
            }
          ],
          "alternatives": [],
          "participantPurpose": "internal",
          "phraseIndex": 1
        },
        {
          "text": "y cuenta cuando hayas terminado",
          "stability": 1.0,
          "confidence": 0.8076,
          "startTimeMs": 1742977530960,
          "duration": {
            "milliseconds": 1547
          },
          "words": [
            {
              "word": "y",
              "confidence": 0.671,
              "startTimeMs": 1742977530960,
              "duration": {
                "milliseconds": 40
              }
            },
            {
              "word": "cuenta",
              "confidence": 0.414,
              "startTimeMs": 1742977531079,
              "duration": {
                "milliseconds": 40
              }
            },
            {
              "word": "cuando",
              "confidence": 0.987,
              "startTimeMs": 1742977531476,
              "duration": {
                "milliseconds": 40
              }
            },
            {
              "word": "hayas",
              "confidence": 0.973,
              "startTimeMs": 1742977531754,
              "duration": {
                "milliseconds": 159
              }
            },
            {
              "word": "terminado",
              "confidence": 0.993,
              "startTimeMs": 1742977532190,
              "duration": {
                "milliseconds": 317
              }
            }
          ],
          "alternatives": [],
          "participantPurpose": "external",
          "phraseIndex": 2
        },
        {
          "text": "sí",
          "stability": 1.0,
          "confidence": 0.345,
          "startTimeMs": 1742977560156,
          "duration": {
            "milliseconds": 35
          },
          "words": [
            {
              "word": "sí",
              "confidence": 0.345,
              "startTimeMs": 1742977560156,
              "duration": {
                "milliseconds": 35
              }
            }
          ],
          "alternatives": [],
          "participantPurpose": "internal",
          "phraseIndex": 3
        }
      ],
      "analytics": {
        "sentiment": [],
        "empathy": [],
        "topics": [
          {
            "participant": "external",
            "topicId": "anon-topic-id",
            "topicName": "Contacto Indirecto",
            "topicPhrase": "Él no está",
            "transcriptPhrase": "no está",
            "confidence": 94,
            "startTimeMs": 1742977527148,
            "duration": {
              "milliseconds": 278
            }
          }
        ],
        "acoustics": [
          {
            "eventType": "voice",
            "offsetMs": 3360,
            "startTimeMs": 1742977525801,
            "durationMs": 3840,
            "participant": "external"
          },
          {
            "eventType": "voice",
            "offsetMs": 6000,
            "startTimeMs": 1742977528441,
            "durationMs": 940,
            "participant": "internal"
          },
          {
            "eventType": "voice",
            "offsetMs": 8440,
            "startTimeMs": 1742977530881,
            "durationMs": 2140,
            "participant": "external"
          },
          {
            "eventType": "silence",
            "offsetMs": 10580,
            "startTimeMs": 1742977533021,
            "durationMs": 27100,
            "participant": "both"
          },
          {
            "eventType": "voice",
            "offsetMs": 37680,
            "startTimeMs": 1742977560121,
            "durationMs": 280,
            "participant": "internal"
          },
          {
            "eventType": "silence",
            "offsetMs": 37960,
            "startTimeMs": 1742977560401,
            "durationMs": 19220,
            "participant": "both"
          }
        ]
      }
    }
  ],
  "participants": [
    {
      "participantPurpose": "customer",
      "initialDirection": "outbound",
      "queueId": "anon-queue-id",
      "divisionId": "anon-division-id",
      "ani": "tel:+34604010261",
      "dnis": "tel:+34656564662",
      "startTimeMs": 1742977522443,
      "endTimeMs": 1742977580007
    },
    {
      "participantPurpose": "acd",
      "initialDirection": "outbound",
      "queueId": "anon-queue-id",
      "divisionId": "anon-division-id",
      "ani": "tel:+34604010261",
      "dnis": "tel:+34656564662",
      "startTimeMs": 1742977525354,
      "endTimeMs": 1742977525917
    },
    {
      "participantPurpose": "agent",
      "userId": "anon-user-id",
      "teamId": "anon-team-id",
      "initialDirection": "outbound",
      "queueId": "anon-queue-id",
      "divisionId": "anon-division-id",
      "ani": "tel:+34604010261",
      "dnis": "tel:+34656564662",
      "startTimeMs": 1742977525864,
      "endTimeMs": 1742977579445,
      "wrapUpCode": "anon-wrap-up-code",
      "wrapUpNotes": ""
    }
  ],
  "uri": "/transcript/v1/organizations/anon-organization-id/conversations/anon-conversation-id/communications/anon-communication-id",
  "startTime": 1742977522441,
  "duration": {
    "milliseconds": 34425
  },
  "mediaType": "call",
  "conversationStartTime": 1742977517363,
  "handleTime": "61452",
  "conversationDuration": 69953,
  "isNamedEntitiesAnalyzed": false
}

y este es el código que se usaba en el otro proyecto y que se replicará aquí para filtrar las llamadas que proseguirán en el proceso:

import os
import sys
from datetime import datetime

# Establece la ruta base del proyecto para facilitar el acceso a los módulos del proyecto.
project_root = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
sys.path.append(project_root)

from src.file_management import load_json
from src.logging_config import log_interaction, setup_logging

def filtro_transcripciones():
    
    setup_logging('filtro')  # Configura el logging para esta fase específica de descarga.

    # Definir la carpeta donde se encuentran los archivos JSON
    carpeta_origen = os.path.join(os.getcwd(), '/shared/DDT_Testing/Genesys/JSON')

    codigos_predefinidos = [ "62c6d1ab-8b6e-448d-b71b-6febf9a76aea", "63d7f77e-6d33-41e6-9b4c-9b5c786bb326",  "68fd4fee-008b-433d-b049-c5ab2b8c97f2",
                            "9c17002f-6f4c-4678-a732-c49d377a3147", "aec7aca9-3a1f-4a13-a74e-2bd238d743d4", "e872ba9a-ff04-487e-9e2a-b65422e6f81f", "0cce61a7-9fe9-4dfd-b9a2-b363c70cdd8e",
                            "a3ee5ded-17f6-426a-9bf0-5a757fbcb8a1", "ace1877e-fe59-4a5e-bada-ec084ffe2469", "f857ef29-9448-439c-9829-b0e0d155632f", "ININ-WRAP-UP-TIMEOUT"
                            ]  # Lista de códigos a buscar

    # Inicializar el diccionario para almacenar los conteos de cada código
    conteo_codigos = {codigo: 0 for codigo in codigos_predefinidos}

    # Recorrer todos los archivos en la carpeta
    for nombre_archivo in os.listdir(carpeta_origen):
        ruta_archivo_origen = os.path.join(carpeta_origen, nombre_archivo)
        
        # Verificar si el archivo es un archivo JSON
        if nombre_archivo.endswith(".json"):
            # Cargar el contenido JSON
            try:
                contenido_json = load_json(ruta_archivo_origen)
                
                campo_extraido = None
    
                # Iterar sobre los participantes para encontrar el 'agent'
                for participante in contenido_json["participants"]:
                    if participante.get("participantPurpose") == "agent":
                        campo_extraido = participante.get("wrapUpCode")
                        break  # Salir del bucle una vez encontrado el 'agent'
                    
                if campo_extraido is None:
                    print(f"No se encontró 'wrapUpCode' para un 'agent' en el archivo {nombre_archivo}") 
                    log_interaction('filtering', 'Success', f"Filtered file due to No 'wrapUpCode' found for an 'agent' in the file with conversation Id: {os.path.splitext(nombre_archivo)[0].replace('-transcript', '')}") 
                    # Eliminar el archivo que no coincide con los códigos predefinidos
                    os.remove(ruta_archivo_origen)               
                # Comparar el campo extraído con el código predefinido
                elif campo_extraido in codigos_predefinidos:
                    conteo_codigos[campo_extraido] += 1
                    log_interaction('filtering', 'Success', f"File passes the filter with 'wrap up code' : {campo_extraido}: and conversation Id: {os.path.splitext(nombre_archivo)[0].replace('-transcript', '')}") 
                else:
                    # Eliminar el archivo que no coincide con los códigos predefinidos
                    os.remove(ruta_archivo_origen)
                    log_interaction('filtering', 'Success', f"Filtered file with 'wrap up code' : {campo_extraido}: and conversation Id: {os.path.splitext(nombre_archivo)[0].replace('-transcript', '')}") 

            except Exception as e:
                # Eliminar el archivo con error de lectura
                os.remove(ruta_archivo_origen)
                print(f"Error al procesar el archivo {nombre_archivo}: {e}")
                log_interaction('filtering', 'Failure', f"Exception when filtering file with conversation Id: {os.path.splitext(nombre_archivo)[0].replace('-transcript', '')}", {"error":str(e)}) 

    # Calcular la suma total de todas las ocurrencias
    suma_total = sum(conteo_codigos.values())

    # Imprimir los resultados
    for codigo, conteo in conteo_codigos.items():
        print(f"El código '{codigo}' aparece {conteo} veces.")
    print(f"La suma total de todas las ocurrencias es: {suma_total}")

if __name__ == "__main__":
    filtro_transcripciones()  

